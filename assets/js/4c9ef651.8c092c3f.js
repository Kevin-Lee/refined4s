"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[873],{50:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(5893),r=t(1151);const i={id:"cats",title:"cats module"},o=void 0,s={id:"cats/cats",title:"cats module",description:"Import",source:"@site/../generated-docs/docs/cats/cats.md",sourceDirName:"cats",slug:"/cats/",permalink:"/docs/cats/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"cats",title:"cats module"},sidebar:"docsSidebar",previous:{title:"Custom Type",permalink:"/docs/core/refined/custom-type"},next:{title:"circe module",permalink:"/docs/circe/"}},l={},c=[{value:"Import",id:"import",level:2},{value:"Use Automatically Drived Instances",id:"use-automatically-drived-instances",level:2},{value:"With Explicit Pre-defined Cats Support",id:"with-explicit-pre-defined-cats-support",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.cats.derivation.instances.given\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.cats.derivation.*\n"})}),"\n",(0,a.jsx)(n.h2,{id:"use-automatically-drived-instances",children:"Use Automatically Drived Instances"}),"\n",(0,a.jsxs)(n.p,{children:["To make ",(0,a.jsx)(n.code,{children:"Newtype"}),", ",(0,a.jsx)(n.code,{children:"Refined"})," and ",(0,a.jsx)(n.code,{children:"InlinedRefined"})," have ",(0,a.jsx)(n.code,{children:"Eq"})," and ",(0,a.jsx)(n.code,{children:"Show"})," type-class instances derived from the actual values, you can simply use"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.cats.derivation.instances.given\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import refined4s.*\nimport refined4s.types.all.*\n\ntype Name = Name.Type\nobject Name extends Newtype[String]\n\ntype NotEmptyStr = NotEmptyStr.Type\nobject NotEmptyStr extends Refined[String] {\n  inline def invalidReason(a: String): String = "non-empty String"\n\n  inline def predicate(a: String): Boolean = a != ""\n}\n\nimport cats.*\nimport cats.syntax.all.*\n\ndef hello[A: Show](a: A): Unit = println(show"Hello $a")\n\ndef equal[A: Eq](a1: A, a2: A): Unit =\n  if Eq[A].eqv(a1, a1) then println("The given values are equal.")\n  else println("The given values are not equal.")\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.strong,{children:["With ",(0,a.jsx)(n.code,{children:"derivation.instances"}),","]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import refined4s.modules.cats.derivation.instances.given\n\nhello(NonEmptyString("Peter Parker"))\n// Hello Peter Parker\n\nhello(Name("Tony Stark"))\n// Hello Tony Stark\n\nhello(NotEmptyStr("Thor Odinson"))\n// Hello Thor Odinson\n\nequal(NonEmptyString("Peter Parker"), NonEmptyString("Peter Parker"))\n// The given values are equal.\nequal(NonEmptyString("Peter Parker"), NonEmptyString("Natasha Romanoff"))\n// The given values are not equal.\n\nequal(Name("Tony Stark"), Name("Tony Stark"))\n// The given values are equal.\nequal(Name("Tony Stark"), Name("Steve Rogers"))\n// The given values are not equal.\n\nequal(NotEmptyStr("Thor Odinson"), NotEmptyStr("Thor Odinson"))\n// The given values are equal.\nequal(NotEmptyStr("Thor Odinson"), NotEmptyStr("Bruce Banner"))\n// The given values are not equal.\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.strong,{children:["Without ",(0,a.jsx)(n.code,{children:"derivation.instances"}),","]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'hello(NonEmptyString("Kevin"))\n// error: \n// no given instance of type cats.Show[refined4s.types.all.NonEmptyString.Type] was found for an implicit parameter of method hello in object MdocApp\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'hello(Name("Kevin"))\n// error: \n// no given instance of type cats.Show[repl.MdocSession.MdocApp.Name.Type] was found for an implicit parameter of method hello in object MdocApp\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'hello(NotEmptyStr("Kevin"))\n// error: \n// no given instance of type cats.Show[repl.MdocSession.MdocApp.NotEmptyStr.Type] was found for an implicit parameter of method hello in object MdocApp\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'equal(NonEmptyString("Kevin"), NonEmptyString("Kevin"))\n// error:\n// no given instance of type cats.kernel.Eq[refined4s.types.all.NonEmptyString.Type] was found for an implicit parameter of method equal in object MdocApp\n// import refined4s.*\n//                   ^\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'equal(Name("Kevin"), Name("Kevin"))\n// error:\n// no given instance of type cats.kernel.Eq[repl.MdocSession.MdocApp.Name.Type] was found for an implicit parameter of method equal in object MdocApp\n// import refined4s.*\n//                   ^\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'equal(NotEmptyStr("Kevin"), NotEmptyStr("Kevin"))\n// error:\n// no given instance of type cats.kernel.Eq[repl.MdocSession.MdocApp.NotEmptyStr.Type] was found for an implicit parameter of method equal in object MdocApp\n// import refined4s.*\n//                   ^\n'})}),"\n",(0,a.jsx)(n.h2,{id:"with-explicit-pre-defined-cats-support",children:"With Explicit Pre-defined Cats Support"}),"\n",(0,a.jsxs)(n.p,{children:["There are the following pre-defined traits to support cats' ",(0,a.jsx)(n.code,{children:"Eq"})," and ",(0,a.jsx)(n.code,{children:"Show"}),"."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"refined4s.modules.cats.derivation.CatsEq"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"refined4s.modules.cats.derivation.CatsShow"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"refined4s.modules.cats.derivation.CatsEqShow"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import refined4s.*\nimport refined4s.modules.cats.derivation.*\n\ntype Name = Name.Type\nobject Name extends Newtype[String] with CatsEqShow[String]\n\ntype NotEmptyStr = NotEmptyStr.Type\nobject NotEmptyStr extends Refined[String] with CatsEqShow[String] {\n  inline def invalidReason(a: String): String = "non-empty String"\n\n  inline def predicate(a: String): Boolean = a != ""\n}\n\nimport cats.*\nimport cats.syntax.all.*\n\ndef hello[A: Show](a: A): Unit = println(show"Hello $a")\n\ndef equal[A: Eq](a1: A, a2: A): Unit =\n  if Eq[A].eqv(a1, a1) then println("The given values are equal.")\n  else println("The given values are not equal.")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'hello(Name("Tony Stark"))\n// Hello Tony Stark\n\nhello(NotEmptyStr("Thor Odinson"))\n// Hello Thor Odinson\n\nequal(Name("Tony Stark"), Name("Tony Stark"))\n// The given values are equal.\nequal(Name("Tony Stark"), Name("Steve Rogers"))\n// The given values are not equal.\n\nequal(NotEmptyStr("Thor Odinson"), NotEmptyStr("Thor Odinson"))\n// The given values are equal.\nequal(NotEmptyStr("Thor Odinson"), NotEmptyStr("Bruce Banner"))\n// The given values are not equal.\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var a=t(7294);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[266],{3523:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>I,frontMatter:()=>o,metadata:()=>s,toc:()=>r});var t=i(5893),l=i(1151);const o={sidebar_position:2,id:"types",title:"Pre-defined Types"},a=void 0,s={id:"core/refined/types",title:"Pre-defined Types",description:"Import",source:"@site/../generated-docs/docs/core/refined/types.md",sourceDirName:"core/refined",slug:"/core/refined/types",permalink:"/docs/core/refined/types",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"types",title:"Pre-defined Types"},sidebar:"docsSidebar",previous:{title:"Refined",permalink:"/docs/core/refined/"},next:{title:"Custom Type",permalink:"/docs/core/refined/custom-type"}},d={},r=[{value:"Import",id:"import",level:2},{value:"Refined <code>Int</code>",id:"refined-int",level:2},{value:"<code>NegInt</code>: negative <code>Int</code>",id:"negint-negative-int",level:3},{value:"Compile-time Validation",id:"compile-time-validation",level:4},{value:"Runtime Validation",id:"runtime-validation",level:4},{value:"Comparison",id:"comparison",level:4},{value:"Get Value",id:"get-value",level:4},{value:"<code>NonNegInt</code>: non-negative <code>Int</code>",id:"nonnegint-non-negative-int",level:3},{value:"Compile-time Validation",id:"compile-time-validation-1",level:4},{value:"Runtime Validation",id:"runtime-validation-1",level:4},{value:"Comparison",id:"comparison-1",level:4},{value:"Get Value",id:"get-value-1",level:4},{value:"<code>PosInt</code>: positive <code>Int</code>",id:"posint-positive-int",level:3},{value:"Compile-time Validation",id:"compile-time-validation-2",level:4},{value:"Runtime Validation",id:"runtime-validation-2",level:4},{value:"Comparison",id:"comparison-2",level:4},{value:"Get Value",id:"get-value-2",level:4},{value:"<code>NonPosInt</code>: non-positive <code>Int</code>",id:"nonposint-non-positive-int",level:3},{value:"Compile-time Validation",id:"compile-time-validation-3",level:4},{value:"Runtime Validation",id:"runtime-validation-3",level:4},{value:"Comparison",id:"comparison-3",level:4},{value:"Get Value",id:"get-value-3",level:4},{value:"Refined <code>Long</code>",id:"refined-long",level:2},{value:"Refined <code>Double</code>",id:"refined-double",level:2},{value:"Refined <code>Float</code>",id:"refined-float",level:2},{value:"Refined <code>BigInt</code>",id:"refined-bigint",level:2},{value:"Refined <code>BigDecimal</code>",id:"refined-bigdecimal",level:2},{value:"Refined <code>NonEmptyString</code>",id:"refined-nonemptystring",level:2},{value:"Refined <code>Uri</code>",id:"refined-uri",level:2}];function c(n){const e={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",...(0,l.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"import",children:"Import"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"import refined4s.types.all.*\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"refined-int",children:["Refined ",(0,t.jsx)(e.code,{children:"Int"})]}),"\n",(0,t.jsxs)(e.h3,{id:"negint-negative-int",children:[(0,t.jsx)(e.code,{children:"NegInt"}),": negative ",(0,t.jsx)(e.code,{children:"Int"})]}),"\n",(0,t.jsx)(e.h4,{id:"compile-time-validation",children:"Compile-time Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"NegInt(-1)\n// res0: Type = -1\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"NegInt(0)\n// error: \n// Invalid value: [0]. It must be a negative Int\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"NegInt(1)\n// error: \n// Invalid value: [1]. It must be a negative Int\n"})}),"\n",(0,t.jsx)(e.h4,{id:"runtime-validation",children:"Runtime Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val validNegInt = -1 \n// validNegInt: Int = -1 \nNegInt.from(validNegInt)\n// res3: Either[String, Type] = Right(value = -1)\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:'val invalidNegInt1 = 0 \n// invalidNegInt1: Int = 0 \nNegInt.from(invalidNegInt1)\n// res4: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a negative Int"\n// )\n\nval invalidNegInt2 = 1\n// invalidNegInt2: Int = 1\nNegInt.from(invalidNegInt2)\n// res5: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a negative Int"\n// )\n'})}),"\n",(0,t.jsx)(e.h4,{id:"comparison",children:"Comparison"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val negInt1 = NegInt(-1)\n// negInt1: Type = -1\nval negInt2 = NegInt(-2)\n// negInt2: Type = -2\n\nnegInt1 > negInt2\n// res6: Boolean = true\nnegInt1 >= negInt2\n// res7: Boolean = true\nnegInt1 == negInt2\n// res8: Boolean = false\nnegInt1 < negInt2\n// res9: Boolean = false\nnegInt1 <= negInt2\n// res10: Boolean = false\n"})}),"\n",(0,t.jsx)(e.h4,{id:"get-value",children:"Get Value"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val negInt123 = NegInt(-123)\n// negInt123: Type = -123\nval negInt999 = NegInt(-999)\n// negInt999: Type = -999\n\nnegInt123.value\n// res11: Int = -123\n\nnegInt999.value\n// res12: Int = -999\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h3,{id:"nonnegint-non-negative-int",children:[(0,t.jsx)(e.code,{children:"NonNegInt"}),": non-negative ",(0,t.jsx)(e.code,{children:"Int"})]}),"\n",(0,t.jsx)(e.h4,{id:"compile-time-validation-1",children:"Compile-time Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"NonNegInt(0)\n// res13: Type = 0\nNonNegInt(1)\n// res14: Type = 1\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"NonNegInt(-2)\n// error: \n// Invalid value: [-2]. It must be a non-negative Int\n"})}),"\n",(0,t.jsx)(e.h4,{id:"runtime-validation-1",children:"Runtime Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val validNonNegInt = 1 \n// validNonNegInt: Int = 1 \nNonNegInt.from(validNonNegInt)\n// res16: Either[String, Type] = Right(value = 1)\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:'val invalidNonNegInt1 = -1\n// invalidNonNegInt1: Int = -1\nNonNegInt.from(invalidNonNegInt1)\n// res17: Either[String, Type] = Left(\n//   value = "Invalid value: [-1]. It must be a non-negative Int"\n// )\n\nval invalidNonNegInt2 = -999\n// invalidNonNegInt2: Int = -999\nNonNegInt.from(invalidNonNegInt2)\n// res18: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a non-negative Int"\n// )\n'})}),"\n",(0,t.jsx)(e.h4,{id:"comparison-1",children:"Comparison"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val nonNegInt1 = NonNegInt(0)\n// nonNegInt1: Type = 0\nval nonNegInt2 = NonNegInt(999)\n// nonNegInt2: Type = 999\n\nnonNegInt1 > nonNegInt2\n// res19: Boolean = false\nnonNegInt1 >= nonNegInt2\n// res20: Boolean = false\nnonNegInt1 == nonNegInt2\n// res21: Boolean = false\nnonNegInt1 < nonNegInt2\n// res22: Boolean = true\nnonNegInt1 <= nonNegInt2\n// res23: Boolean = true\n"})}),"\n",(0,t.jsx)(e.h4,{id:"get-value-1",children:"Get Value"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val nonNegInt123 = NonNegInt(0)\n// nonNegInt123: Type = 0\nval nonNegInt999 = NonNegInt(999)\n// nonNegInt999: Type = 999\n\nnonNegInt123.value\n// res24: Int = 0\n\nnonNegInt999.value\n// res25: Int = 999\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h3,{id:"posint-positive-int",children:[(0,t.jsx)(e.code,{children:"PosInt"}),": positive ",(0,t.jsx)(e.code,{children:"Int"})]}),"\n",(0,t.jsx)(e.h4,{id:"compile-time-validation-2",children:"Compile-time Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"PosInt(1)\n// res26: Type = 1\nPosInt(999)\n// res27: Type = 999\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"PosInt(0)\n// error: \n// Invalid value: [0]. It must be a positive Int\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"PosInt(-2)\n// error: \n// Invalid value: [-2]. It must be a positive Int\n"})}),"\n",(0,t.jsx)(e.h4,{id:"runtime-validation-2",children:"Runtime Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val validPosInt = 1\n// validPosInt: Int = 1\nPosInt.from(validPosInt)\n// res30: Either[String, Type] = Right(value = 1)\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:'val invalidPosInt1 = 0\n// invalidPosInt1: Int = 0\nPosInt.from(invalidPosInt1)\n// res31: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a positive Int"\n// )\n\nval invalidPosInt2 = -999\n// invalidPosInt2: Int = -999\nPosInt.from(invalidPosInt2)\n// res32: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a positive Int"\n// )\n'})}),"\n",(0,t.jsx)(e.h4,{id:"comparison-2",children:"Comparison"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val posInt1 = PosInt(1)\n// posInt1: Type = 1\nval posInt2 = PosInt(999)\n// posInt2: Type = 999\n\nposInt1 > posInt2\n// res33: Boolean = false\nposInt1 >= posInt2\n// res34: Boolean = false\nposInt1 == posInt2\n// res35: Boolean = false\nposInt1 < posInt2\n// res36: Boolean = true\nposInt1 <= posInt2\n// res37: Boolean = true\n"})}),"\n",(0,t.jsx)(e.h4,{id:"get-value-2",children:"Get Value"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val posInt123 = PosInt(123)\n// posInt123: Type = 123\nval posInt999 = PosInt(999)\n// posInt999: Type = 999\n\nposInt123.value\n// res38: Int = 123\n\nposInt999.value\n// res39: Int = 999\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h3,{id:"nonposint-non-positive-int",children:[(0,t.jsx)(e.code,{children:"NonPosInt"}),": non-positive ",(0,t.jsx)(e.code,{children:"Int"})]}),"\n",(0,t.jsx)(e.h4,{id:"compile-time-validation-3",children:"Compile-time Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"NonPosInt(0)\n// res40: Type = 0\nNonPosInt(-999)\n// res41: Type = -999\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"NonPosInt(1)\n// error: \n// Invalid value: [1]. It must be a non-positive Int\n"})}),"\n",(0,t.jsx)(e.h4,{id:"runtime-validation-3",children:"Runtime Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val validNonPosInt = 0\n// validNonPosInt: Int = 0\nNonPosInt.from(validNonPosInt)\n// res43: Either[String, Type] = Right(value = 0)\n\nval validNonPosInt2 = -999\n// validNonPosInt2: Int = -999\nNonPosInt.from(validNonPosInt2)\n// res44: Either[String, Type] = Right(value = -999)\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:'val invalidNonPosInt1 = 1\n// invalidNonPosInt1: Int = 1\nNonPosInt.from(invalidNonPosInt1)\n// res45: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a non-positive Int"\n// )\n\nval invalidNonPosInt2 = 999\n// invalidNonPosInt2: Int = 999\nNonPosInt.from(invalidNonPosInt2)\n// res46: Either[String, Type] = Left(\n//   value = "Invalid value: [999]. It must be a non-positive Int"\n// )\n'})}),"\n",(0,t.jsx)(e.h4,{id:"comparison-3",children:"Comparison"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val nonPosInt1 = NonPosInt(0)\n// nonPosInt1: Type = 0\nval nonPosInt2 = NonPosInt(-999)\n// nonPosInt2: Type = -999\n\nnonPosInt1 > nonPosInt2\n// res47: Boolean = true\nnonPosInt1 >= nonPosInt2\n// res48: Boolean = true\nnonPosInt1 == nonPosInt2\n// res49: Boolean = false\nnonPosInt1 < nonPosInt2\n// res50: Boolean = false\nnonPosInt1 <= nonPosInt2\n// res51: Boolean = false\n"})}),"\n",(0,t.jsx)(e.h4,{id:"get-value-3",children:"Get Value"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-scala",children:"val nonPosInt0 = NonPosInt(0)\n// nonPosInt0: Type = 0\nval nonPosIntMinus999 = NonPosInt(-999)\n// nonPosIntMinus999: Type = -999\n\nnonPosInt0.value\n// res52: Int = 0\n\nnonPosIntMinus999.value\n// res53: Int = -999\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"refined-long",children:["Refined ",(0,t.jsx)(e.code,{children:"Long"})]}),"\n",(0,t.jsx)(e.p,{children:"...TBA..."}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"refined-double",children:["Refined ",(0,t.jsx)(e.code,{children:"Double"})]}),"\n",(0,t.jsx)(e.p,{children:"...TBA..."}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"refined-float",children:["Refined ",(0,t.jsx)(e.code,{children:"Float"})]}),"\n",(0,t.jsx)(e.p,{children:"...TBA..."}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"refined-bigint",children:["Refined ",(0,t.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,t.jsx)(e.p,{children:"...TBA..."}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"refined-bigdecimal",children:["Refined ",(0,t.jsx)(e.code,{children:"BigDecimal"})]}),"\n",(0,t.jsx)(e.p,{children:"...TBA..."}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"refined-nonemptystring",children:["Refined ",(0,t.jsx)(e.code,{children:"NonEmptyString"})]}),"\n",(0,t.jsx)(e.p,{children:"...TBA..."}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"refined-uri",children:["Refined ",(0,t.jsx)(e.code,{children:"Uri"})]}),"\n",(0,t.jsx)(e.p,{children:"...TBA..."})]})}function I(n={}){const{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},1151:(n,e,i)=>{i.d(e,{Z:()=>s,a:()=>a});var t=i(7294);const l={},o=t.createContext(l);function a(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:a(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);
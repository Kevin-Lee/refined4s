"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[80],{8099:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var t=i(5893),o=i(1151);const r={id:"doobie",title:"doobie module"},d=void 0,s={id:"doobie/doobie",title:"doobie module",description:"Import",source:"@site/../generated-docs/docs/doobie/doobie.md",sourceDirName:"doobie",slug:"/doobie/",permalink:"/docs/doobie/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"doobie",title:"doobie module"},sidebar:"docsSidebar",previous:{title:"pureconfig module",permalink:"/docs/pureconfig/"}},a={},l=[{value:"Import",id:"import",level:2},{value:"Use Drived Instances for Pre-defined Types",id:"use-drived-instances-for-pre-defined-types",level:2},{value:"With Explicit Pre-defined Doobie Support",id:"with-explicit-pre-defined-doobie-support",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.doobie.derivation.types.all.given\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.doobie.derivation.*\n"})}),"\n",(0,t.jsx)(n.h2,{id:"use-drived-instances-for-pre-defined-types",children:"Use Drived Instances for Pre-defined Types"}),"\n",(0,t.jsxs)(n.p,{children:["To use ",(0,t.jsx)(n.code,{children:"Newtype"}),", ",(0,t.jsx)(n.code,{children:"Refined"})," and ",(0,t.jsx)(n.code,{children:"InlinedRefined"})," with Doobie by having ",(0,t.jsx)(n.code,{children:"Get"})," and ",(0,t.jsx)(n.code,{children:"Put"})," (or ",(0,t.jsx)(n.code,{children:"Read"})," and ",(0,t.jsx)(n.code,{children:"Write"})," from ",(0,t.jsx)(n.code,{children:"Get"})," and ",(0,t.jsx)(n.code,{children:"Put"}),") type-class instances derived from the actual values, you can simply use"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import refined4s.modules.doobie.derivation.types.all.given\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"NOTE",type:"warning",children:(0,t.jsxs)(n.p,{children:["This works only when the actual type already has ",(0,t.jsx)(n.code,{children:"Get"})," and ",(0,t.jsx)(n.code,{children:"Put"}),"."]})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"refined4s.modules.doobie.derivation.types.all.given"})," is required only when ",(0,t.jsx)(n.code,{children:"Get"})," and/or ",(0,t.jsx)(n.code,{children:"Put"})," is required for the pre-defined types.",(0,t.jsx)("br",{}),"\nSo if you want your ",(0,t.jsx)(n.code,{children:"Newtype"})," or ",(0,t.jsx)(n.code,{children:"Refined"})," or ",(0,t.jsx)(n.code,{children:"InlinedRefined"})," to have ",(0,t.jsx)(n.code,{children:"Get"})," and ",(0,t.jsx)(n.code,{children:"Put"})," instances,",(0,t.jsx)("br",{}),"\nyou can use ",(0,t.jsx)(n.a,{href:"#with-explicit-pre-defined-doobie-support",children:"pre-defined traits for doobie"})," or the ",(0,t.jsxs)(n.a,{href:"#with-deriving-method",children:[(0,t.jsx)(n.code,{children:"deriving"})," method"]})," instead.",(0,t.jsx)("br",{})]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import cats.effect.*\n\nimport refined4s.*\nimport refined4s.types.all.*\n\nimport doobie.*\nimport doobie.syntax.all.*\n\ndef insertOrUpdate[F[*]](fragment: Fragment)(transactor: Transactor[F])(\n  using bracket: Bracket[F, Throwable]\n): F[Int] =\n  fragment\n    .update\n    .run\n    .transact(transactor)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["With ",(0,t.jsx)(n.code,{children:"derivation.types.all"}),","]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",metastring:"{1}",children:'import refined4s.modules.doobie.derivation.types.all.given\n\nfinal case class Person(name: NonEmptyString)\n\nval name = NonEmptyString("Tony Stark")\n\ninsertOrUpdate[F](\n  sql"""\n    INSERT INTO db_tools_test.example (value) VALUES ($name)\n  """\n)(transactor)\n\n// You don\'t have to do use .value like\n// insertOrUpdate[F](\n// sql"""\n//     INSERT INTO db_tools_test.example (value) VALUES ($name.value)\n//   """\n// )(transactor)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"with-explicit-pre-defined-doobie-support",children:"With Explicit Pre-defined Doobie Support"}),"\n",(0,t.jsxs)(n.p,{children:["There are the following pre-defined traits to support doobie' ",(0,t.jsx)(n.code,{children:"Encoder"})," and ",(0,t.jsx)(n.code,{children:"Decoder"})," (or ",(0,t.jsx)(n.code,{children:"Codec"}),")."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"refined4s.modules.doobie.derivation.DoobiePut"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"refined4s.modules.doobie.derivation.DoobieNewtypeGet"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"refined4s.modules.doobie.derivation.DoobieRefinedGet"})}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"NOTE",type:"warning",children:(0,t.jsxs)(n.p,{children:["This works only when the actual type already has ",(0,t.jsx)(n.code,{children:"Get"})," and/or ",(0,t.jsx)(n.code,{children:"Put"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"e.g.)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",metastring:"{7,10}",children:'import cats.effect.*\n\nimport refined4s.*\nimport refined4s.types.all.*\nimport refined4s.modules.doobie.derivation.*\n\ntype NotEmptyStr = NotEmptyStr.Type\nobject NotEmptyStr extends Refined[String] with DoobieRefinedGetPut[String] {\n  inline def invalidReason(a: String): String = "non-empty String"\n\n  inline def predicate(a: String): Boolean = a != ""\n}\n\ntype Name = Name.Type\nobject Name extends Newtype[NotEmptyStr] with DoobieNewtypeGetPut[NotEmptyStr]\n\n\nfinal case class Person(name: Name)\n\nimport doobie.*\nimport doobie.syntax.all.*\n\ndef insertOrUpdate[F[*]](fragment: Fragment)(transactor: Transactor[F])(\n  using bracket: Bracket[F, Throwable]\n): F[Int] =\n  fragment\n    .update\n    .run\n    .transact(transactor)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'insertOrUpdate[F](\n  sql"""\n    INSERT INTO db_tools_test.example (name) VALUES (${person.name})\n  """\n)(transactor)\n\n// You don\'t have to use .value or .value.value like\n// insertOrUpdate[F](\n//   sql"""\n//     INSERT INTO db_tools_test.example (name) VALUES (${person.name.value.value})\n//   """\n// )(transactor)\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>s,a:()=>d});var t=i(7294);const o={},r=t.createContext(o);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
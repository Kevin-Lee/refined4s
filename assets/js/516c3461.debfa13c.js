"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[266],{3523:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>g,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>d});var o=i(5893),a=i(1151);const l={sidebar_position:2,id:"types",title:"Pre-defined Types"},s=void 0,t={id:"core/refined/types",title:"Pre-defined Types",description:"Import",source:"@site/../generated-docs/docs/core/refined/types.md",sourceDirName:"core/refined",slug:"/core/refined/types",permalink:"/docs/core/refined/types",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"types",title:"Pre-defined Types"},sidebar:"docsSidebar",previous:{title:"Refined",permalink:"/docs/core/refined/"},next:{title:"Custom Type",permalink:"/docs/core/refined/custom-type"}},g={},d=[{value:"Import",id:"import",level:2},{value:"Refined <code>Int</code>",id:"refined-int",level:2},{value:"<code>NegInt</code>: negative <code>Int</code>",id:"negint-negative-int",level:3},{value:"Compile-time Validation",id:"compile-time-validation",level:4},{value:"Runtime Validation",id:"runtime-validation",level:4},{value:"Comparison",id:"comparison",level:4},{value:"Get Value",id:"get-value",level:4},{value:"<code>NonNegInt</code>: non-negative <code>Int</code>",id:"nonnegint-non-negative-int",level:3},{value:"Compile-time Validation",id:"compile-time-validation-1",level:4},{value:"Runtime Validation",id:"runtime-validation-1",level:4},{value:"Comparison",id:"comparison-1",level:4},{value:"Get Value",id:"get-value-1",level:4},{value:"<code>PosInt</code>: positive <code>Int</code>",id:"posint-positive-int",level:3},{value:"Compile-time Validation",id:"compile-time-validation-2",level:4},{value:"Runtime Validation",id:"runtime-validation-2",level:4},{value:"Comparison",id:"comparison-2",level:4},{value:"Get Value",id:"get-value-2",level:4},{value:"<code>NonPosInt</code>: non-positive <code>Int</code>",id:"nonposint-non-positive-int",level:3},{value:"Compile-time Validation",id:"compile-time-validation-3",level:4},{value:"Runtime Validation",id:"runtime-validation-3",level:4},{value:"Comparison",id:"comparison-3",level:4},{value:"Get Value",id:"get-value-3",level:4},{value:"Refined <code>Long</code>",id:"refined-long",level:2},{value:"<code>NegLong</code>: negative <code>Long</code>",id:"neglong-negative-long",level:3},{value:"Compile-time Validation",id:"compile-time-validation-4",level:4},{value:"Runtime Validation",id:"runtime-validation-4",level:4},{value:"Comparison",id:"comparison-4",level:4},{value:"Get Value",id:"get-value-4",level:4},{value:"<code>NonNegLong</code>: non-negative <code>Long</code>",id:"nonneglong-non-negative-long",level:3},{value:"Compile-time Validation",id:"compile-time-validation-5",level:4},{value:"Runtime Validation",id:"runtime-validation-5",level:4},{value:"Comparison",id:"comparison-5",level:4},{value:"Get Value",id:"get-value-5",level:4},{value:"<code>PosLong</code>: positive <code>Long</code>",id:"poslong-positive-long",level:3},{value:"Compile-time Validation",id:"compile-time-validation-6",level:4},{value:"Runtime Validation",id:"runtime-validation-6",level:4},{value:"Comparison",id:"comparison-6",level:4},{value:"Get Value",id:"get-value-6",level:4},{value:"<code>NonPosLong</code>: non-positive <code>Long</code>",id:"nonposlong-non-positive-long",level:3},{value:"Compile-time Validation",id:"compile-time-validation-7",level:4},{value:"Runtime Validation",id:"runtime-validation-7",level:4},{value:"Comparison",id:"comparison-7",level:4},{value:"Get Value",id:"get-value-7",level:4},{value:"Refined <code>Double</code>",id:"refined-double",level:2},{value:"Refined <code>Float</code>",id:"refined-float",level:2},{value:"Refined <code>BigInt</code>",id:"refined-bigint",level:2},{value:"<code>NegBigInt</code>: negative <code>BigInt</code>",id:"negbigint-negative-bigint",level:3},{value:"Compile-time Validation",id:"compile-time-validation-8",level:4},{value:"Runtime Validation",id:"runtime-validation-8",level:4},{value:"Comparison",id:"comparison-8",level:4},{value:"Get Value",id:"get-value-8",level:4},{value:"<code>NonNegBigInt</code>: non-negative <code>BigInt</code>",id:"nonnegbigint-non-negative-bigint",level:3},{value:"Compile-time Validation",id:"compile-time-validation-9",level:4},{value:"Runtime Validation",id:"runtime-validation-9",level:4},{value:"Comparison",id:"comparison-9",level:4},{value:"Get Value",id:"get-value-9",level:4},{value:"<code>PosBigInt</code>: positive <code>BigInt</code>",id:"posbigint-positive-bigint",level:3},{value:"Compile-time Validation",id:"compile-time-validation-10",level:4},{value:"Runtime Validation",id:"runtime-validation-10",level:4},{value:"Comparison",id:"comparison-10",level:4},{value:"Get Value",id:"get-value-10",level:4},{value:"<code>NonPosBigInt</code>: non-positive <code>BigInt</code>",id:"nonposbigint-non-positive-bigint",level:3},{value:"Compile-time Validation",id:"compile-time-validation-11",level:4},{value:"Runtime Validation",id:"runtime-validation-11",level:4},{value:"Comparison",id:"comparison-11",level:4},{value:"Get Value",id:"get-value-11",level:4},{value:"Refined <code>BigDecimal</code>",id:"refined-bigdecimal",level:2},{value:"Refined <code>NonEmptyString</code>",id:"refined-nonemptystring",level:2},{value:"Refined <code>Uri</code>",id:"refined-uri",level:2}];function r(n){const e={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"import",children:"Import"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"import refined4s.types.all.*\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"refined-int",children:["Refined ",(0,o.jsx)(e.code,{children:"Int"})]}),"\n",(0,o.jsxs)(e.h3,{id:"negint-negative-int",children:[(0,o.jsx)(e.code,{children:"NegInt"}),": negative ",(0,o.jsx)(e.code,{children:"Int"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NegInt(-1)\n// res0: Type = -1\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NegInt(0)\n// error: \n// Invalid value: [0]. It must be a negative Int\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NegInt(1)\n// error: \n// Invalid value: [1]. It must be a negative Int\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validNegInt = -1 \n// validNegInt: Int = -1 \nNegInt.from(validNegInt)\n// res3: Either[String, Type] = Right(value = -1)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidNegInt1 = 0 \n// invalidNegInt1: Int = 0 \nNegInt.from(invalidNegInt1)\n// res4: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a negative Int"\n// )\n\nval invalidNegInt2 = 1\n// invalidNegInt2: Int = 1\nNegInt.from(invalidNegInt2)\n// res5: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a negative Int"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val negInt1 = NegInt(-1)\n// negInt1: Type = -1\nval negInt2 = NegInt(-2)\n// negInt2: Type = -2\n\nnegInt1 > negInt2\n// res6: Boolean = true\nnegInt1 >= negInt2\n// res7: Boolean = true\nnegInt1 == negInt2\n// res8: Boolean = false\nnegInt1 < negInt2\n// res9: Boolean = false\nnegInt1 <= negInt2\n// res10: Boolean = false\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val negInt123 = NegInt(-123)\n// negInt123: Type = -123\nval negInt999 = NegInt(-999)\n// negInt999: Type = -999\n\nnegInt123.value\n// res11: Int = -123\n\nnegInt999.value\n// res12: Int = -999\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"nonnegint-non-negative-int",children:[(0,o.jsx)(e.code,{children:"NonNegInt"}),": non-negative ",(0,o.jsx)(e.code,{children:"Int"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-1",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonNegInt(0)\n// res13: Type = 0\nNonNegInt(1)\n// res14: Type = 1\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonNegInt(-2)\n// error: \n// Invalid value: [-2]. It must be a non-negative Int\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-1",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validNonNegInt = 1 \n// validNonNegInt: Int = 1 \nNonNegInt.from(validNonNegInt)\n// res16: Either[String, Type] = Right(value = 1)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidNonNegInt1 = -1\n// invalidNonNegInt1: Int = -1\nNonNegInt.from(invalidNonNegInt1)\n// res17: Either[String, Type] = Left(\n//   value = "Invalid value: [-1]. It must be a non-negative Int"\n// )\n\nval invalidNonNegInt2 = -999\n// invalidNonNegInt2: Int = -999\nNonNegInt.from(invalidNonNegInt2)\n// res18: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a non-negative Int"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-1",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonNegInt1 = NonNegInt(0)\n// nonNegInt1: Type = 0\nval nonNegInt2 = NonNegInt(999)\n// nonNegInt2: Type = 999\n\nnonNegInt1 > nonNegInt2\n// res19: Boolean = false\nnonNegInt1 >= nonNegInt2\n// res20: Boolean = false\nnonNegInt1 == nonNegInt2\n// res21: Boolean = false\nnonNegInt1 < nonNegInt2\n// res22: Boolean = true\nnonNegInt1 <= nonNegInt2\n// res23: Boolean = true\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-1",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonNegInt123 = NonNegInt(0)\n// nonNegInt123: Type = 0\nval nonNegInt999 = NonNegInt(999)\n// nonNegInt999: Type = 999\n\nnonNegInt123.value\n// res24: Int = 0\n\nnonNegInt999.value\n// res25: Int = 999\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"posint-positive-int",children:[(0,o.jsx)(e.code,{children:"PosInt"}),": positive ",(0,o.jsx)(e.code,{children:"Int"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-2",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"PosInt(1)\n// res26: Type = 1\nPosInt(999)\n// res27: Type = 999\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"PosInt(0)\n// error: \n// Invalid value: [0]. It must be a positive Int\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"PosInt(-2)\n// error: \n// Invalid value: [-2]. It must be a positive Int\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-2",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validPosInt = 1\n// validPosInt: Int = 1\nPosInt.from(validPosInt)\n// res30: Either[String, Type] = Right(value = 1)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidPosInt1 = 0\n// invalidPosInt1: Int = 0\nPosInt.from(invalidPosInt1)\n// res31: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a positive Int"\n// )\n\nval invalidPosInt2 = -999\n// invalidPosInt2: Int = -999\nPosInt.from(invalidPosInt2)\n// res32: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a positive Int"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-2",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val posInt1 = PosInt(1)\n// posInt1: Type = 1\nval posInt2 = PosInt(999)\n// posInt2: Type = 999\n\nposInt1 > posInt2\n// res33: Boolean = false\nposInt1 >= posInt2\n// res34: Boolean = false\nposInt1 == posInt2\n// res35: Boolean = false\nposInt1 < posInt2\n// res36: Boolean = true\nposInt1 <= posInt2\n// res37: Boolean = true\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-2",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val posInt123 = PosInt(123)\n// posInt123: Type = 123\nval posInt999 = PosInt(999)\n// posInt999: Type = 999\n\nposInt123.value\n// res38: Int = 123\n\nposInt999.value\n// res39: Int = 999\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"nonposint-non-positive-int",children:[(0,o.jsx)(e.code,{children:"NonPosInt"}),": non-positive ",(0,o.jsx)(e.code,{children:"Int"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-3",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonPosInt(0)\n// res40: Type = 0\nNonPosInt(-999)\n// res41: Type = -999\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonPosInt(1)\n// error: \n// Invalid value: [1]. It must be a non-positive Int\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-3",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validNonPosInt = 0\n// validNonPosInt: Int = 0\nNonPosInt.from(validNonPosInt)\n// res43: Either[String, Type] = Right(value = 0)\n\nval validNonPosInt2 = -999\n// validNonPosInt2: Int = -999\nNonPosInt.from(validNonPosInt2)\n// res44: Either[String, Type] = Right(value = -999)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidNonPosInt1 = 1\n// invalidNonPosInt1: Int = 1\nNonPosInt.from(invalidNonPosInt1)\n// res45: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a non-positive Int"\n// )\n\nval invalidNonPosInt2 = 999\n// invalidNonPosInt2: Int = 999\nNonPosInt.from(invalidNonPosInt2)\n// res46: Either[String, Type] = Left(\n//   value = "Invalid value: [999]. It must be a non-positive Int"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-3",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonPosInt1 = NonPosInt(0)\n// nonPosInt1: Type = 0\nval nonPosInt2 = NonPosInt(-999)\n// nonPosInt2: Type = -999\n\nnonPosInt1 > nonPosInt2\n// res47: Boolean = true\nnonPosInt1 >= nonPosInt2\n// res48: Boolean = true\nnonPosInt1 == nonPosInt2\n// res49: Boolean = false\nnonPosInt1 < nonPosInt2\n// res50: Boolean = false\nnonPosInt1 <= nonPosInt2\n// res51: Boolean = false\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-3",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonPosInt0 = NonPosInt(0)\n// nonPosInt0: Type = 0\nval nonPosIntMinus999 = NonPosInt(-999)\n// nonPosIntMinus999: Type = -999\n\nnonPosInt0.value\n// res52: Int = 0\n\nnonPosIntMinus999.value\n// res53: Int = -999\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h2,{id:"refined-long",children:["Refined ",(0,o.jsx)(e.code,{children:"Long"})]}),"\n",(0,o.jsxs)(e.h3,{id:"neglong-negative-long",children:[(0,o.jsx)(e.code,{children:"NegLong"}),": negative ",(0,o.jsx)(e.code,{children:"Long"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-4",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NegLong(-1L)\n// res54: Type = -1L\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NegLong(0L)\n// error: \n// Invalid value: [0L]. It must be a negative Long\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NegLong(1L)\n// error: \n// Invalid value: [1L]. It must be a negative Long\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-4",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validNegLong = -1L \n// validNegLong: Long = -1L \nNegLong.from(validNegLong)\n// res57: Either[String, Type] = Right(value = -1L)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidNegLong1 = 0L \n// invalidNegLong1: Long = 0L \nNegLong.from(invalidNegLong1)\n// res58: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a negative Long"\n// )\n\nval invalidNegLong2 = 1L\n// invalidNegLong2: Long = 1L\nNegLong.from(invalidNegLong2)\n// res59: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a negative Long"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-4",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val negLong1 = NegLong(-1L)\n// negLong1: Type = -1L\nval negLong2 = NegLong(-2L)\n// negLong2: Type = -2L\n\nnegLong1 > negLong2\n// res60: Boolean = true\nnegLong1 >= negLong2\n// res61: Boolean = true\nnegLong1 == negLong2\n// res62: Boolean = false\nnegLong1 < negLong2\n// res63: Boolean = false\nnegLong1 <= negLong2\n// res64: Boolean = false\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-4",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val negLong123 = NegLong(-123L)\n// negLong123: Type = -123L\nval negLong999 = NegLong(-999L)\n// negLong999: Type = -999L\n\nnegLong123.value\n// res65: Long = -123L\n\nnegLong999.value\n// res66: Long = -999L\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"nonneglong-non-negative-long",children:[(0,o.jsx)(e.code,{children:"NonNegLong"}),": non-negative ",(0,o.jsx)(e.code,{children:"Long"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-5",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonNegLong(0L)\n// res67: Type = 0L\nNonNegLong(1L)\n// res68: Type = 1L\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonNegLong(-2L)\n// error: \n// Invalid value: [-2L]. It must be a non-negative Long\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-5",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validNonNegLong = 1L\n// validNonNegLong: Long = 1L\nNonNegLong.from(validNonNegLong)\n// res70: Either[String, Type] = Right(value = 1L)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidNonNegLong1 = -1L\n// invalidNonNegLong1: Long = -1L\nNonNegLong.from(invalidNonNegLong1)\n// res71: Either[String, Type] = Left(\n//   value = "Invalid value: [-1]. It must be a non-negative Long"\n// )\n\nval invalidNonNegLong2 = -999L\n// invalidNonNegLong2: Long = -999L\nNonNegLong.from(invalidNonNegLong2)\n// res72: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a non-negative Long"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-5",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonNegLong1 = NonNegLong(0L)\n// nonNegLong1: Type = 0L\nval nonNegLong2 = NonNegLong(999L)\n// nonNegLong2: Type = 999L\n\nnonNegLong1 > nonNegLong2\n// res73: Boolean = false\nnonNegLong1 >= nonNegLong2\n// res74: Boolean = false\nnonNegLong1 == nonNegLong2\n// res75: Boolean = false\nnonNegLong1 < nonNegLong2\n// res76: Boolean = true\nnonNegLong1 <= nonNegLong2\n// res77: Boolean = true\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-5",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonNegLong123 = NonNegLong(0L)\n// nonNegLong123: Type = 0L\nval nonNegLong999 = NonNegLong(999L)\n// nonNegLong999: Type = 999L\n\nnonNegLong123.value\n// res78: Long = 0L\n\nnonNegLong999.value\n// res79: Long = 999L\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"poslong-positive-long",children:[(0,o.jsx)(e.code,{children:"PosLong"}),": positive ",(0,o.jsx)(e.code,{children:"Long"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-6",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"PosLong(1L)\n// res80: Type = 1L\nPosLong(999L)\n// res81: Type = 999L\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"PosLong(0L)\n// error: \n// Invalid value: [0L]. It must be a positive Long\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"PosLong(-2L)\n// error: \n// Invalid value: [-2L]. It must be a positive Long\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-6",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validPosLong = 1L\n// validPosLong: Long = 1L\nPosLong.from(validPosLong)\n// res84: Either[String, Type] = Right(value = 1L)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidPosLong1 = 0L\n// invalidPosLong1: Long = 0L\nPosLong.from(invalidPosLong1)\n// res85: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a positive Long"\n// )\n\nval invalidPosLong2 = -999L\n// invalidPosLong2: Long = -999L\nPosLong.from(invalidPosLong2)\n// res86: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a positive Long"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-6",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val posLong1 = PosLong(1L)\n// posLong1: Type = 1L\nval posLong2 = PosLong(999L)\n// posLong2: Type = 999L\n\nposLong1 > posLong2\n// res87: Boolean = false\nposLong1 >= posLong2\n// res88: Boolean = false\nposLong1 == posLong2\n// res89: Boolean = false\nposLong1 < posLong2\n// res90: Boolean = true\nposLong1 <= posLong2\n// res91: Boolean = true\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-6",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val posLong123 = PosLong(123L)\n// posLong123: Type = 123L\nval posLong999 = PosLong(999L)\n// posLong999: Type = 999L\n\nposLong123.value\n// res92: Long = 123L\n\nposLong999.value\n// res93: Long = 999L\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"nonposlong-non-positive-long",children:[(0,o.jsx)(e.code,{children:"NonPosLong"}),": non-positive ",(0,o.jsx)(e.code,{children:"Long"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-7",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonPosLong(0L)\n// res94: Type = 0L\nNonPosLong(-999L)\n// res95: Type = -999L\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonPosLong(1L)\n// error: \n// Invalid value: [1L]. It must be a non-positive Long\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-7",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validNonPosLong = 0L\n// validNonPosLong: Long = 0L\nNonPosLong.from(validNonPosLong)\n// res97: Either[String, Type] = Right(value = 0L)\n\nval validNonPosLong2 = -999L\n// validNonPosLong2: Long = -999L\nNonPosLong.from(validNonPosLong2)\n// res98: Either[String, Type] = Right(value = -999L)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidNonPosLong1 = 1L\n// invalidNonPosLong1: Long = 1L\nNonPosLong.from(invalidNonPosLong1)\n// res99: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a non-positive Long"\n// )\n\nval invalidNonPosLong2 = 999L\n// invalidNonPosLong2: Long = 999L\nNonPosLong.from(invalidNonPosLong2)\n// res100: Either[String, Type] = Left(\n//   value = "Invalid value: [999]. It must be a non-positive Long"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-7",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonPosLong1 = NonPosLong(0L)\n// nonPosLong1: Type = 0L\nval nonPosLong2 = NonPosLong(-999L)\n// nonPosLong2: Type = -999L\n\nnonPosLong1 > nonPosLong2\n// res101: Boolean = true\nnonPosLong1 >= nonPosLong2\n// res102: Boolean = true\nnonPosLong1 == nonPosLong2\n// res103: Boolean = false\nnonPosLong1 < nonPosLong2\n// res104: Boolean = false\nnonPosLong1 <= nonPosLong2\n// res105: Boolean = false\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-7",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonPosLong0 = NonPosLong(0L)\n// nonPosLong0: Type = 0L\nval nonPosLongMinus999 = NonPosLong(-999L)\n// nonPosLongMinus999: Type = -999L\n\nnonPosLong0.value\n// res106: Long = 0L\n\nnonPosLongMinus999.value\n// res107: Long = -999L\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h2,{id:"refined-double",children:["Refined ",(0,o.jsx)(e.code,{children:"Double"})]}),"\n",(0,o.jsx)(e.p,{children:"...TBA..."}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h2,{id:"refined-float",children:["Refined ",(0,o.jsx)(e.code,{children:"Float"})]}),"\n",(0,o.jsx)(e.p,{children:"...TBA..."}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h2,{id:"refined-bigint",children:["Refined ",(0,o.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,o.jsxs)(e.h3,{id:"negbigint-negative-bigint",children:[(0,o.jsx)(e.code,{children:"NegBigInt"}),": negative ",(0,o.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-8",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NegBigInt(-1)\n// res108: Type = -1\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NegBigInt(0)\n// error: \n// Invalid value: [BigInt.apply(0)]. It must be a negative BigInt\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NegBigInt(1)\n// error: \n// Invalid value: [BigInt.apply(1)]. It must be a negative BigInt\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-8",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validNegBigInt = -1 \n// validNegBigInt: Int = -1 \nNegBigInt.from(validNegBigInt)\n// res111: Either[String, Type] = Right(value = -1)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidNegBigInt1 = 0 \n// invalidNegBigInt1: Int = 0 \nNegBigInt.from(invalidNegBigInt1)\n// res112: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a negative BigInt"\n// )\n\nval invalidNegBigInt2 = 1\n// invalidNegBigInt2: Int = 1\nNegBigInt.from(invalidNegBigInt2)\n// res113: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a negative BigInt"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-8",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val negBigInt1 = NegBigInt(-1)\n// negBigInt1: Type = -1\nval negBigInt2 = NegBigInt(-2)\n// negBigInt2: Type = -2\n\nnegBigInt1 > negBigInt2\n// res114: Boolean = true\nnegBigInt1 >= negBigInt2\n// res115: Boolean = true\nnegBigInt1 == negBigInt2\n// res116: Boolean = false\nnegBigInt1 < negBigInt2\n// res117: Boolean = false\nnegBigInt1 <= negBigInt2\n// res118: Boolean = false\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-8",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val negBigInt123 = NegBigInt(-123)\n// negBigInt123: Type = -123\nval negBigInt999 = NegBigInt(-999)\n// negBigInt999: Type = -999\n\nnegBigInt123.value\n// res119: BigInt = -123\n\nnegBigInt999.value\n// res120: BigInt = -999\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"nonnegbigint-non-negative-bigint",children:[(0,o.jsx)(e.code,{children:"NonNegBigInt"}),": non-negative ",(0,o.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-9",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonNegBigInt(0)\n// res121: Type = 0\nNonNegBigInt(1)\n// res122: Type = 1\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonNegBigInt(-2)\n// error: \n// Invalid value: [BigInt.apply(-2)]. It must be a non-negative BigInt\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-9",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validNonNegBigInt = 1 \n// validNonNegBigInt: Int = 1 \nNonNegBigInt.from(validNonNegBigInt)\n// res124: Either[String, Type] = Right(value = 1)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidNonNegBigInt1 = -1\n// invalidNonNegBigInt1: Int = -1\nNonNegBigInt.from(invalidNonNegBigInt1)\n// res125: Either[String, Type] = Left(\n//   value = "Invalid value: [-1]. It must be a non-negative BigInt"\n// )\n\nval invalidNonNegBigInt2 = -999\n// invalidNonNegBigInt2: Int = -999\nNonNegBigInt.from(invalidNonNegBigInt2)\n// res126: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a non-negative BigInt"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-9",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonNegBigInt1 = NonNegBigInt(0)\n// nonNegBigInt1: Type = 0\nval nonNegBigInt2 = NonNegBigInt(999)\n// nonNegBigInt2: Type = 999\n\nnonNegBigInt1 > nonNegBigInt2\n// res127: Boolean = false\nnonNegBigInt1 >= nonNegBigInt2\n// res128: Boolean = false\nnonNegBigInt1 == nonNegBigInt2\n// res129: Boolean = false\nnonNegBigInt1 < nonNegBigInt2\n// res130: Boolean = true\nnonNegBigInt1 <= nonNegBigInt2\n// res131: Boolean = true\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-9",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonNegBigInt123 = NonNegBigInt(0)\n// nonNegBigInt123: Type = 0\nval nonNegBigInt999 = NonNegBigInt(999)\n// nonNegBigInt999: Type = 999\n\nnonNegBigInt123.value\n// res132: BigInt = 0\n\nnonNegBigInt999.value\n// res133: BigInt = 999\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"posbigint-positive-bigint",children:[(0,o.jsx)(e.code,{children:"PosBigInt"}),": positive ",(0,o.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-10",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"PosBigInt(1)\n// res134: Type = 1\nPosBigInt(999)\n// res135: Type = 999\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"PosBigInt(0)\n// error: \n// Invalid value: [BigInt.apply(0)]. It must be a positive BigInt\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"PosBigInt(-2)\n// error: \n// Invalid value: [BigInt.apply(-2)]. It must be a positive BigInt\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-10",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validPosBigInt = 1\n// validPosBigInt: Int = 1\nPosBigInt.from(validPosBigInt)\n// res138: Either[String, Type] = Right(value = 1)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidPosBigInt1 = 0\n// invalidPosBigInt1: Int = 0\nPosBigInt.from(invalidPosBigInt1)\n// res139: Either[String, Type] = Left(\n//   value = "Invalid value: [0]. It must be a positive BigInt"\n// )\n\nval invalidPosBigInt2 = -999\n// invalidPosBigInt2: Int = -999\nPosBigInt.from(invalidPosBigInt2)\n// res140: Either[String, Type] = Left(\n//   value = "Invalid value: [-999]. It must be a positive BigInt"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-10",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val posBigInt1 = PosBigInt(1)\n// posBigInt1: Type = 1\nval posBigInt2 = PosBigInt(999)\n// posBigInt2: Type = 999\n\nposBigInt1 > posBigInt2\n// res141: Boolean = false\nposBigInt1 >= posBigInt2\n// res142: Boolean = false\nposBigInt1 == posBigInt2\n// res143: Boolean = false\nposBigInt1 < posBigInt2\n// res144: Boolean = true\nposBigInt1 <= posBigInt2\n// res145: Boolean = true\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-10",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val posBigInt123 = PosBigInt(123)\n// posBigInt123: Type = 123\nval posBigInt999 = PosBigInt(999)\n// posBigInt999: Type = 999\n\nposBigInt123.value\n// res146: BigInt = 123\n\nposBigInt999.value\n// res147: BigInt = 999\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h3,{id:"nonposbigint-non-positive-bigint",children:[(0,o.jsx)(e.code,{children:"NonPosBigInt"}),": non-positive ",(0,o.jsx)(e.code,{children:"BigInt"})]}),"\n",(0,o.jsx)(e.h4,{id:"compile-time-validation-11",children:"Compile-time Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonPosBigInt(0)\n// res148: Type = 0\nNonPosBigInt(-999)\n// res149: Type = -999\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"NonPosBigInt(1)\n// error: \n// Invalid value: [BigInt.apply(1)]. It must be a non-positive BigInt\n"})}),"\n",(0,o.jsx)(e.h4,{id:"runtime-validation-11",children:"Runtime Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val validNonPosBigInt = 0\n// validNonPosBigInt: Int = 0\nNonPosBigInt.from(validNonPosBigInt)\n// res151: Either[String, Type] = Right(value = 0)\n\nval validNonPosBigInt2 = -999\n// validNonPosBigInt2: Int = -999\nNonPosBigInt.from(validNonPosBigInt2)\n// res152: Either[String, Type] = Right(value = -999)\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:'val invalidNonPosBigInt1 = 1\n// invalidNonPosBigInt1: Int = 1\nNonPosBigInt.from(invalidNonPosBigInt1)\n// res153: Either[String, Type] = Left(\n//   value = "Invalid value: [1]. It must be a non-positive BigInt"\n// )\n\nval invalidNonPosBigInt2 = 999\n// invalidNonPosBigInt2: Int = 999\nNonPosBigInt.from(invalidNonPosBigInt2)\n// res154: Either[String, Type] = Left(\n//   value = "Invalid value: [999]. It must be a non-positive BigInt"\n// )\n'})}),"\n",(0,o.jsx)(e.h4,{id:"comparison-11",children:"Comparison"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonPosBigInt1 = NonPosBigInt(0)\n// nonPosBigInt1: Type = 0\nval nonPosBigInt2 = NonPosBigInt(-999)\n// nonPosBigInt2: Type = -999\n\nnonPosBigInt1 > nonPosBigInt2\n// res155: Boolean = true\nnonPosBigInt1 >= nonPosBigInt2\n// res156: Boolean = true\nnonPosBigInt1 == nonPosBigInt2\n// res157: Boolean = false\nnonPosBigInt1 < nonPosBigInt2\n// res158: Boolean = false\nnonPosBigInt1 <= nonPosBigInt2\n// res159: Boolean = false\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get-value-11",children:"Get Value"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-scala",children:"val nonPosBigInt0 = NonPosBigInt(0)\n// nonPosBigInt0: Type = 0\nval nonPosBigIntMinus999 = NonPosBigInt(-999)\n// nonPosBigIntMinus999: Type = -999\n\nnonPosBigInt0.value\n// res160: BigInt = 0\n\nnonPosBigIntMinus999.value\n// res161: BigInt = -999\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h2,{id:"refined-bigdecimal",children:["Refined ",(0,o.jsx)(e.code,{children:"BigDecimal"})]}),"\n",(0,o.jsx)(e.p,{children:"...TBA..."}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h2,{id:"refined-nonemptystring",children:["Refined ",(0,o.jsx)(e.code,{children:"NonEmptyString"})]}),"\n",(0,o.jsx)(e.p,{children:"...TBA..."}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.h2,{id:"refined-uri",children:["Refined ",(0,o.jsx)(e.code,{children:"Uri"})]}),"\n",(0,o.jsx)(e.p,{children:"...TBA..."})]})}function c(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(r,{...n})}):r(n)}},1151:(n,e,i)=>{i.d(e,{Z:()=>t,a:()=>s});var o=i(7294);const a={},l=o.createContext(a);function s(n){const e=o.useContext(l);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),o.createElement(l.Provider,{value:e},n.children)}}}]);